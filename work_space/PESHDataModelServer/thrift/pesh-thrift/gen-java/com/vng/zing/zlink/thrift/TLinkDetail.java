/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.zlink.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLinkDetail implements org.apache.thrift.TBase<TLinkDetail, TLinkDetail._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLinkDetail");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cateId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("caption", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contents", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MEDIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("medias", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("opt", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField IMAGES_DOWNLOADED_FIELD_DESC = new org.apache.thrift.protocol.TField("imagesDownloaded", org.apache.thrift.protocol.TType.MAP, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLinkDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLinkDetailTupleSchemeFactory());
  }

  public String url; // required
  public int cateId; // optional
  public String title; // optional
  public String desc; // optional
  public String caption; // optional
  public List<String> contents; // optional
  public List<String> images; // optional
  public List<THrefLink> links; // optional
  public List<TLinkMedia> medias; // optional
  public long date; // optional
  public byte opt; // optional
  public byte feature; // optional
  public long linkId; // optional
  public Map<String,String> imagesDownloaded; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    CATE_ID((short)2, "cateId"),
    TITLE((short)3, "title"),
    DESC((short)4, "desc"),
    CAPTION((short)5, "caption"),
    CONTENTS((short)6, "contents"),
    IMAGES((short)7, "images"),
    LINKS((short)8, "links"),
    MEDIAS((short)9, "medias"),
    DATE((short)10, "date"),
    OPT((short)11, "opt"),
    FEATURE((short)12, "feature"),
    LINK_ID((short)13, "linkId"),
    IMAGES_DOWNLOADED((short)14, "imagesDownloaded");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // CATE_ID
          return CATE_ID;
        case 3: // TITLE
          return TITLE;
        case 4: // DESC
          return DESC;
        case 5: // CAPTION
          return CAPTION;
        case 6: // CONTENTS
          return CONTENTS;
        case 7: // IMAGES
          return IMAGES;
        case 8: // LINKS
          return LINKS;
        case 9: // MEDIAS
          return MEDIAS;
        case 10: // DATE
          return DATE;
        case 11: // OPT
          return OPT;
        case 12: // FEATURE
          return FEATURE;
        case 13: // LINK_ID
          return LINK_ID;
        case 14: // IMAGES_DOWNLOADED
          return IMAGES_DOWNLOADED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEID_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private static final int __OPT_ISSET_ID = 2;
  private static final int __FEATURE_ISSET_ID = 3;
  private static final int __LINKID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CATE_ID,_Fields.TITLE,_Fields.DESC,_Fields.CAPTION,_Fields.CONTENTS,_Fields.IMAGES,_Fields.LINKS,_Fields.MEDIAS,_Fields.DATE,_Fields.OPT,_Fields.FEATURE,_Fields.LINK_ID,_Fields.IMAGES_DOWNLOADED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATE_ID, new org.apache.thrift.meta_data.FieldMetaData("cateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAPTION, new org.apache.thrift.meta_data.FieldMetaData("caption", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("contents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THrefLink.class))));
    tmpMap.put(_Fields.MEDIAS, new org.apache.thrift.meta_data.FieldMetaData("medias", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLinkMedia.class))));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPT, new org.apache.thrift.meta_data.FieldMetaData("opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMAGES_DOWNLOADED, new org.apache.thrift.meta_data.FieldMetaData("imagesDownloaded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLinkDetail.class, metaDataMap);
  }

  public TLinkDetail() {
  }

  public TLinkDetail(
    String url)
  {
    this();
    this.url = url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLinkDetail(TLinkDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.cateId = other.cateId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetCaption()) {
      this.caption = other.caption;
    }
    if (other.isSetContents()) {
      List<String> __this__contents = new ArrayList<String>();
      for (String other_element : other.contents) {
        __this__contents.add(other_element);
      }
      this.contents = __this__contents;
    }
    if (other.isSetImages()) {
      List<String> __this__images = new ArrayList<String>();
      for (String other_element : other.images) {
        __this__images.add(other_element);
      }
      this.images = __this__images;
    }
    if (other.isSetLinks()) {
      List<THrefLink> __this__links = new ArrayList<THrefLink>();
      for (THrefLink other_element : other.links) {
        __this__links.add(new THrefLink(other_element));
      }
      this.links = __this__links;
    }
    if (other.isSetMedias()) {
      List<TLinkMedia> __this__medias = new ArrayList<TLinkMedia>();
      for (TLinkMedia other_element : other.medias) {
        __this__medias.add(new TLinkMedia(other_element));
      }
      this.medias = __this__medias;
    }
    this.date = other.date;
    this.opt = other.opt;
    this.feature = other.feature;
    this.linkId = other.linkId;
    if (other.isSetImagesDownloaded()) {
      Map<String,String> __this__imagesDownloaded = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.imagesDownloaded.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__imagesDownloaded_copy_key = other_element_key;

        String __this__imagesDownloaded_copy_value = other_element_value;

        __this__imagesDownloaded.put(__this__imagesDownloaded_copy_key, __this__imagesDownloaded_copy_value);
      }
      this.imagesDownloaded = __this__imagesDownloaded;
    }
  }

  public TLinkDetail deepCopy() {
    return new TLinkDetail(this);
  }

  @Override
  public void clear() {
    this.url = null;
    setCateIdIsSet(false);
    this.cateId = 0;
    this.title = null;
    this.desc = null;
    this.caption = null;
    this.contents = null;
    this.images = null;
    this.links = null;
    this.medias = null;
    setDateIsSet(false);
    this.date = 0;
    setOptIsSet(false);
    this.opt = 0;
    setFeatureIsSet(false);
    this.feature = 0;
    setLinkIdIsSet(false);
    this.linkId = 0;
    this.imagesDownloaded = null;
  }

  public String getUrl() {
    return this.url;
  }

  public TLinkDetail setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getCateId() {
    return this.cateId;
  }

  public TLinkDetail setCateId(int cateId) {
    this.cateId = cateId;
    setCateIdIsSet(true);
    return this;
  }

  public void unsetCateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEID_ISSET_ID);
  }

  /** Returns true if field cateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEID_ISSET_ID);
  }

  public void setCateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public TLinkDetail setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public TLinkDetail setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getCaption() {
    return this.caption;
  }

  public TLinkDetail setCaption(String caption) {
    this.caption = caption;
    return this;
  }

  public void unsetCaption() {
    this.caption = null;
  }

  /** Returns true if field caption is set (has been assigned a value) and false otherwise */
  public boolean isSetCaption() {
    return this.caption != null;
  }

  public void setCaptionIsSet(boolean value) {
    if (!value) {
      this.caption = null;
    }
  }

  public int getContentsSize() {
    return (this.contents == null) ? 0 : this.contents.size();
  }

  public java.util.Iterator<String> getContentsIterator() {
    return (this.contents == null) ? null : this.contents.iterator();
  }

  public void addToContents(String elem) {
    if (this.contents == null) {
      this.contents = new ArrayList<String>();
    }
    this.contents.add(elem);
  }

  public List<String> getContents() {
    return this.contents;
  }

  public TLinkDetail setContents(List<String> contents) {
    this.contents = contents;
    return this;
  }

  public void unsetContents() {
    this.contents = null;
  }

  /** Returns true if field contents is set (has been assigned a value) and false otherwise */
  public boolean isSetContents() {
    return this.contents != null;
  }

  public void setContentsIsSet(boolean value) {
    if (!value) {
      this.contents = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<String> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(String elem) {
    if (this.images == null) {
      this.images = new ArrayList<String>();
    }
    this.images.add(elem);
  }

  public List<String> getImages() {
    return this.images;
  }

  public TLinkDetail setImages(List<String> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<THrefLink> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(THrefLink elem) {
    if (this.links == null) {
      this.links = new ArrayList<THrefLink>();
    }
    this.links.add(elem);
  }

  public List<THrefLink> getLinks() {
    return this.links;
  }

  public TLinkDetail setLinks(List<THrefLink> links) {
    this.links = links;
    return this;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public int getMediasSize() {
    return (this.medias == null) ? 0 : this.medias.size();
  }

  public java.util.Iterator<TLinkMedia> getMediasIterator() {
    return (this.medias == null) ? null : this.medias.iterator();
  }

  public void addToMedias(TLinkMedia elem) {
    if (this.medias == null) {
      this.medias = new ArrayList<TLinkMedia>();
    }
    this.medias.add(elem);
  }

  public List<TLinkMedia> getMedias() {
    return this.medias;
  }

  public TLinkDetail setMedias(List<TLinkMedia> medias) {
    this.medias = medias;
    return this;
  }

  public void unsetMedias() {
    this.medias = null;
  }

  /** Returns true if field medias is set (has been assigned a value) and false otherwise */
  public boolean isSetMedias() {
    return this.medias != null;
  }

  public void setMediasIsSet(boolean value) {
    if (!value) {
      this.medias = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public TLinkDetail setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public byte getOpt() {
    return this.opt;
  }

  public TLinkDetail setOpt(byte opt) {
    this.opt = opt;
    setOptIsSet(true);
    return this;
  }

  public void unsetOpt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPT_ISSET_ID);
  }

  /** Returns true if field opt is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt() {
    return EncodingUtils.testBit(__isset_bitfield, __OPT_ISSET_ID);
  }

  public void setOptIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPT_ISSET_ID, value);
  }

  public byte getFeature() {
    return this.feature;
  }

  public TLinkDetail setFeature(byte feature) {
    this.feature = feature;
    setFeatureIsSet(true);
    return this;
  }

  public void unsetFeature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEATURE_ISSET_ID);
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return EncodingUtils.testBit(__isset_bitfield, __FEATURE_ISSET_ID);
  }

  public void setFeatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEATURE_ISSET_ID, value);
  }

  public long getLinkId() {
    return this.linkId;
  }

  public TLinkDetail setLinkId(long linkId) {
    this.linkId = linkId;
    setLinkIdIsSet(true);
    return this;
  }

  public void unsetLinkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkId() {
    return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  public void setLinkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
  }

  public int getImagesDownloadedSize() {
    return (this.imagesDownloaded == null) ? 0 : this.imagesDownloaded.size();
  }

  public void putToImagesDownloaded(String key, String val) {
    if (this.imagesDownloaded == null) {
      this.imagesDownloaded = new HashMap<String,String>();
    }
    this.imagesDownloaded.put(key, val);
  }

  public Map<String,String> getImagesDownloaded() {
    return this.imagesDownloaded;
  }

  public TLinkDetail setImagesDownloaded(Map<String,String> imagesDownloaded) {
    this.imagesDownloaded = imagesDownloaded;
    return this;
  }

  public void unsetImagesDownloaded() {
    this.imagesDownloaded = null;
  }

  /** Returns true if field imagesDownloaded is set (has been assigned a value) and false otherwise */
  public boolean isSetImagesDownloaded() {
    return this.imagesDownloaded != null;
  }

  public void setImagesDownloadedIsSet(boolean value) {
    if (!value) {
      this.imagesDownloaded = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case CATE_ID:
      if (value == null) {
        unsetCateId();
      } else {
        setCateId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case CAPTION:
      if (value == null) {
        unsetCaption();
      } else {
        setCaption((String)value);
      }
      break;

    case CONTENTS:
      if (value == null) {
        unsetContents();
      } else {
        setContents((List<String>)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<String>)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((List<THrefLink>)value);
      }
      break;

    case MEDIAS:
      if (value == null) {
        unsetMedias();
      } else {
        setMedias((List<TLinkMedia>)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case OPT:
      if (value == null) {
        unsetOpt();
      } else {
        setOpt((Byte)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((Byte)value);
      }
      break;

    case LINK_ID:
      if (value == null) {
        unsetLinkId();
      } else {
        setLinkId((Long)value);
      }
      break;

    case IMAGES_DOWNLOADED:
      if (value == null) {
        unsetImagesDownloaded();
      } else {
        setImagesDownloaded((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case CATE_ID:
      return Integer.valueOf(getCateId());

    case TITLE:
      return getTitle();

    case DESC:
      return getDesc();

    case CAPTION:
      return getCaption();

    case CONTENTS:
      return getContents();

    case IMAGES:
      return getImages();

    case LINKS:
      return getLinks();

    case MEDIAS:
      return getMedias();

    case DATE:
      return Long.valueOf(getDate());

    case OPT:
      return Byte.valueOf(getOpt());

    case FEATURE:
      return Byte.valueOf(getFeature());

    case LINK_ID:
      return Long.valueOf(getLinkId());

    case IMAGES_DOWNLOADED:
      return getImagesDownloaded();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case CATE_ID:
      return isSetCateId();
    case TITLE:
      return isSetTitle();
    case DESC:
      return isSetDesc();
    case CAPTION:
      return isSetCaption();
    case CONTENTS:
      return isSetContents();
    case IMAGES:
      return isSetImages();
    case LINKS:
      return isSetLinks();
    case MEDIAS:
      return isSetMedias();
    case DATE:
      return isSetDate();
    case OPT:
      return isSetOpt();
    case FEATURE:
      return isSetFeature();
    case LINK_ID:
      return isSetLinkId();
    case IMAGES_DOWNLOADED:
      return isSetImagesDownloaded();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLinkDetail)
      return this.equals((TLinkDetail)that);
    return false;
  }

  public boolean equals(TLinkDetail that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_cateId = true && this.isSetCateId();
    boolean that_present_cateId = true && that.isSetCateId();
    if (this_present_cateId || that_present_cateId) {
      if (!(this_present_cateId && that_present_cateId))
        return false;
      if (this.cateId != that.cateId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_caption = true && this.isSetCaption();
    boolean that_present_caption = true && that.isSetCaption();
    if (this_present_caption || that_present_caption) {
      if (!(this_present_caption && that_present_caption))
        return false;
      if (!this.caption.equals(that.caption))
        return false;
    }

    boolean this_present_contents = true && this.isSetContents();
    boolean that_present_contents = true && that.isSetContents();
    if (this_present_contents || that_present_contents) {
      if (!(this_present_contents && that_present_contents))
        return false;
      if (!this.contents.equals(that.contents))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    boolean this_present_medias = true && this.isSetMedias();
    boolean that_present_medias = true && that.isSetMedias();
    if (this_present_medias || that_present_medias) {
      if (!(this_present_medias && that_present_medias))
        return false;
      if (!this.medias.equals(that.medias))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_opt = true && this.isSetOpt();
    boolean that_present_opt = true && that.isSetOpt();
    if (this_present_opt || that_present_opt) {
      if (!(this_present_opt && that_present_opt))
        return false;
      if (this.opt != that.opt)
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (this.feature != that.feature)
        return false;
    }

    boolean this_present_linkId = true && this.isSetLinkId();
    boolean that_present_linkId = true && that.isSetLinkId();
    if (this_present_linkId || that_present_linkId) {
      if (!(this_present_linkId && that_present_linkId))
        return false;
      if (this.linkId != that.linkId)
        return false;
    }

    boolean this_present_imagesDownloaded = true && this.isSetImagesDownloaded();
    boolean that_present_imagesDownloaded = true && that.isSetImagesDownloaded();
    if (this_present_imagesDownloaded || that_present_imagesDownloaded) {
      if (!(this_present_imagesDownloaded && that_present_imagesDownloaded))
        return false;
      if (!this.imagesDownloaded.equals(that.imagesDownloaded))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLinkDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLinkDetail typedOther = (TLinkDetail)other;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCateId()).compareTo(typedOther.isSetCateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cateId, typedOther.cateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaption()).compareTo(typedOther.isSetCaption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caption, typedOther.caption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContents()).compareTo(typedOther.isSetContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contents, typedOther.contents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(typedOther.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, typedOther.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(typedOther.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, typedOther.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedias()).compareTo(typedOther.isSetMedias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medias, typedOther.medias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt()).compareTo(typedOther.isSetOpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt, typedOther.opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(typedOther.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, typedOther.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagesDownloaded()).compareTo(typedOther.isSetImagesDownloaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagesDownloaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagesDownloaded, typedOther.imagesDownloaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLinkDetail(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (isSetCateId()) {
      if (!first) sb.append(", ");
      sb.append("cateId:");
      sb.append(this.cateId);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetCaption()) {
      if (!first) sb.append(", ");
      sb.append("caption:");
      if (this.caption == null) {
        sb.append("null");
      } else {
        sb.append(this.caption);
      }
      first = false;
    }
    if (isSetContents()) {
      if (!first) sb.append(", ");
      sb.append("contents:");
      if (this.contents == null) {
        sb.append("null");
      } else {
        sb.append(this.contents);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetLinks()) {
      if (!first) sb.append(", ");
      sb.append("links:");
      if (this.links == null) {
        sb.append("null");
      } else {
        sb.append(this.links);
      }
      first = false;
    }
    if (isSetMedias()) {
      if (!first) sb.append(", ");
      sb.append("medias:");
      if (this.medias == null) {
        sb.append("null");
      } else {
        sb.append(this.medias);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (isSetOpt()) {
      if (!first) sb.append(", ");
      sb.append("opt:");
      sb.append(this.opt);
      first = false;
    }
    if (isSetFeature()) {
      if (!first) sb.append(", ");
      sb.append("feature:");
      sb.append(this.feature);
      first = false;
    }
    if (isSetLinkId()) {
      if (!first) sb.append(", ");
      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
    }
    if (isSetImagesDownloaded()) {
      if (!first) sb.append(", ");
      sb.append("imagesDownloaded:");
      if (this.imagesDownloaded == null) {
        sb.append("null");
      } else {
        sb.append(this.imagesDownloaded);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLinkDetailStandardSchemeFactory implements SchemeFactory {
    public TLinkDetailStandardScheme getScheme() {
      return new TLinkDetailStandardScheme();
    }
  }

  private static class TLinkDetailStandardScheme extends StandardScheme<TLinkDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLinkDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cateId = iprot.readI32();
              struct.setCateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caption = iprot.readString();
              struct.setCaptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.contents = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.contents.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.images = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.images.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.links = new ArrayList<THrefLink>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  THrefLink _elem8; // required
                  _elem8 = new THrefLink();
                  _elem8.read(iprot);
                  struct.links.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEDIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.medias = new ArrayList<TLinkMedia>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  TLinkMedia _elem11; // required
                  _elem11 = new TLinkMedia();
                  _elem11.read(iprot);
                  struct.medias.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setMediasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.opt = iprot.readByte();
              struct.setOptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.feature = iprot.readByte();
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LINK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.linkId = iprot.readI64();
              struct.setLinkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IMAGES_DOWNLOADED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.imagesDownloaded = new HashMap<String,String>(2*_map12.size);
                for (int _i13 = 0; _i13 < _map12.size; ++_i13)
                {
                  String _key14; // required
                  String _val15; // required
                  _key14 = iprot.readString();
                  _val15 = iprot.readString();
                  struct.imagesDownloaded.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setImagesDownloadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLinkDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCateId()) {
        oprot.writeFieldBegin(CATE_ID_FIELD_DESC);
        oprot.writeI32(struct.cateId);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.caption != null) {
        if (struct.isSetCaption()) {
          oprot.writeFieldBegin(CAPTION_FIELD_DESC);
          oprot.writeString(struct.caption);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contents != null) {
        if (struct.isSetContents()) {
          oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.contents.size()));
            for (String _iter16 : struct.contents)
            {
              oprot.writeString(_iter16);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (String _iter17 : struct.images)
            {
              oprot.writeString(_iter17);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.links != null) {
        if (struct.isSetLinks()) {
          oprot.writeFieldBegin(LINKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.links.size()));
            for (THrefLink _iter18 : struct.links)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.medias != null) {
        if (struct.isSetMedias()) {
          oprot.writeFieldBegin(MEDIAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.medias.size()));
            for (TLinkMedia _iter19 : struct.medias)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDate()) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpt()) {
        oprot.writeFieldBegin(OPT_FIELD_DESC);
        oprot.writeByte(struct.opt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFeature()) {
        oprot.writeFieldBegin(FEATURE_FIELD_DESC);
        oprot.writeByte(struct.feature);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLinkId()) {
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
      }
      if (struct.imagesDownloaded != null) {
        if (struct.isSetImagesDownloaded()) {
          oprot.writeFieldBegin(IMAGES_DOWNLOADED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.imagesDownloaded.size()));
            for (Map.Entry<String, String> _iter20 : struct.imagesDownloaded.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLinkDetailTupleSchemeFactory implements SchemeFactory {
    public TLinkDetailTupleScheme getScheme() {
      return new TLinkDetailTupleScheme();
    }
  }

  private static class TLinkDetailTupleScheme extends TupleScheme<TLinkDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLinkDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.url);
      BitSet optionals = new BitSet();
      if (struct.isSetCateId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      if (struct.isSetCaption()) {
        optionals.set(3);
      }
      if (struct.isSetContents()) {
        optionals.set(4);
      }
      if (struct.isSetImages()) {
        optionals.set(5);
      }
      if (struct.isSetLinks()) {
        optionals.set(6);
      }
      if (struct.isSetMedias()) {
        optionals.set(7);
      }
      if (struct.isSetDate()) {
        optionals.set(8);
      }
      if (struct.isSetOpt()) {
        optionals.set(9);
      }
      if (struct.isSetFeature()) {
        optionals.set(10);
      }
      if (struct.isSetLinkId()) {
        optionals.set(11);
      }
      if (struct.isSetImagesDownloaded()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCateId()) {
        oprot.writeI32(struct.cateId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetCaption()) {
        oprot.writeString(struct.caption);
      }
      if (struct.isSetContents()) {
        {
          oprot.writeI32(struct.contents.size());
          for (String _iter21 : struct.contents)
          {
            oprot.writeString(_iter21);
          }
        }
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (String _iter22 : struct.images)
          {
            oprot.writeString(_iter22);
          }
        }
      }
      if (struct.isSetLinks()) {
        {
          oprot.writeI32(struct.links.size());
          for (THrefLink _iter23 : struct.links)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetMedias()) {
        {
          oprot.writeI32(struct.medias.size());
          for (TLinkMedia _iter24 : struct.medias)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetOpt()) {
        oprot.writeByte(struct.opt);
      }
      if (struct.isSetFeature()) {
        oprot.writeByte(struct.feature);
      }
      if (struct.isSetLinkId()) {
        oprot.writeI64(struct.linkId);
      }
      if (struct.isSetImagesDownloaded()) {
        {
          oprot.writeI32(struct.imagesDownloaded.size());
          for (Map.Entry<String, String> _iter25 : struct.imagesDownloaded.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLinkDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.cateId = iprot.readI32();
        struct.setCateIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.caption = iprot.readString();
        struct.setCaptionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.contents = new ArrayList<String>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            String _elem28; // required
            _elem28 = iprot.readString();
            struct.contents.add(_elem28);
          }
        }
        struct.setContentsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31; // required
            _elem31 = iprot.readString();
            struct.images.add(_elem31);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.links = new ArrayList<THrefLink>(_list32.size);
          for (int _i33 = 0; _i33 < _list32.size; ++_i33)
          {
            THrefLink _elem34; // required
            _elem34 = new THrefLink();
            _elem34.read(iprot);
            struct.links.add(_elem34);
          }
        }
        struct.setLinksIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.medias = new ArrayList<TLinkMedia>(_list35.size);
          for (int _i36 = 0; _i36 < _list35.size; ++_i36)
          {
            TLinkMedia _elem37; // required
            _elem37 = new TLinkMedia();
            _elem37.read(iprot);
            struct.medias.add(_elem37);
          }
        }
        struct.setMediasIsSet(true);
      }
      if (incoming.get(8)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.opt = iprot.readByte();
        struct.setOptIsSet(true);
      }
      if (incoming.get(10)) {
        struct.feature = iprot.readByte();
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(11)) {
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.imagesDownloaded = new HashMap<String,String>(2*_map38.size);
          for (int _i39 = 0; _i39 < _map38.size; ++_i39)
          {
            String _key40; // required
            String _val41; // required
            _key40 = iprot.readString();
            _val41 = iprot.readString();
            struct.imagesDownloaded.put(_key40, _val41);
          }
        }
        struct.setImagesDownloadedIsSet(true);
      }
    }
  }

}

