/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.zlink.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLinkImageDownload implements org.apache.thrift.TBase<TLinkImageDownload, TLinkImageDownload._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLinkImageDownload");

  private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLinkImageDownloadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLinkImageDownloadTupleSchemeFactory());
  }

  public long linkId; // required
  public List<String> images; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINK_ID((short)1, "linkId"),
    IMAGES((short)2, "images");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINK_ID
          return LINK_ID;
        case 2: // IMAGES
          return IMAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINKID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IMAGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLinkImageDownload.class, metaDataMap);
  }

  public TLinkImageDownload() {
  }

  public TLinkImageDownload(
    long linkId)
  {
    this();
    this.linkId = linkId;
    setLinkIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLinkImageDownload(TLinkImageDownload other) {
    __isset_bitfield = other.__isset_bitfield;
    this.linkId = other.linkId;
    if (other.isSetImages()) {
      List<String> __this__images = new ArrayList<String>();
      for (String other_element : other.images) {
        __this__images.add(other_element);
      }
      this.images = __this__images;
    }
  }

  public TLinkImageDownload deepCopy() {
    return new TLinkImageDownload(this);
  }

  @Override
  public void clear() {
    setLinkIdIsSet(false);
    this.linkId = 0;
    this.images = null;
  }

  public long getLinkId() {
    return this.linkId;
  }

  public TLinkImageDownload setLinkId(long linkId) {
    this.linkId = linkId;
    setLinkIdIsSet(true);
    return this;
  }

  public void unsetLinkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkId() {
    return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  public void setLinkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<String> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(String elem) {
    if (this.images == null) {
      this.images = new ArrayList<String>();
    }
    this.images.add(elem);
  }

  public List<String> getImages() {
    return this.images;
  }

  public TLinkImageDownload setImages(List<String> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINK_ID:
      if (value == null) {
        unsetLinkId();
      } else {
        setLinkId((Long)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINK_ID:
      return Long.valueOf(getLinkId());

    case IMAGES:
      return getImages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINK_ID:
      return isSetLinkId();
    case IMAGES:
      return isSetImages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLinkImageDownload)
      return this.equals((TLinkImageDownload)that);
    return false;
  }

  public boolean equals(TLinkImageDownload that) {
    if (that == null)
      return false;

    boolean this_present_linkId = true;
    boolean that_present_linkId = true;
    if (this_present_linkId || that_present_linkId) {
      if (!(this_present_linkId && that_present_linkId))
        return false;
      if (this.linkId != that.linkId)
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLinkImageDownload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLinkImageDownload typedOther = (TLinkImageDownload)other;

    lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(typedOther.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, typedOther.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLinkImageDownload(");
    boolean first = true;

    sb.append("linkId:");
    sb.append(this.linkId);
    first = false;
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLinkImageDownloadStandardSchemeFactory implements SchemeFactory {
    public TLinkImageDownloadStandardScheme getScheme() {
      return new TLinkImageDownloadStandardScheme();
    }
  }

  private static class TLinkImageDownloadStandardScheme extends StandardScheme<TLinkImageDownload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLinkImageDownload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.linkId = iprot.readI64();
              struct.setLinkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.images = new ArrayList<String>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  String _elem62; // required
                  _elem62 = iprot.readString();
                  struct.images.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLinkId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLinkImageDownload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
      oprot.writeI64(struct.linkId);
      oprot.writeFieldEnd();
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (String _iter63 : struct.images)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLinkImageDownloadTupleSchemeFactory implements SchemeFactory {
    public TLinkImageDownloadTupleScheme getScheme() {
      return new TLinkImageDownloadTupleScheme();
    }
  }

  private static class TLinkImageDownloadTupleScheme extends TupleScheme<TLinkImageDownload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLinkImageDownload struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.linkId);
      BitSet optionals = new BitSet();
      if (struct.isSetImages()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (String _iter64 : struct.images)
          {
            oprot.writeString(_iter64);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLinkImageDownload struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.linkId = iprot.readI64();
      struct.setLinkIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new ArrayList<String>(_list65.size);
          for (int _i66 = 0; _i66 < _list65.size; ++_i66)
          {
            String _elem67; // required
            _elem67 = iprot.readString();
            struct.images.add(_elem67);
          }
        }
        struct.setImagesIsSet(true);
      }
    }
  }

}

