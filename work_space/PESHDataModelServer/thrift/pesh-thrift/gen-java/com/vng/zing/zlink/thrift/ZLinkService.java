/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.zing.zlink.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ZLinkService {

  public interface Iface {

    public int ping() throws org.apache.thrift.TException;

    public TDetailResult getLink(long linkId) throws org.apache.thrift.TException;

    public TListLinkDetailResult getListLinkByUser(int userId, long linkId, int pos, int count) throws org.apache.thrift.TException;

    public TListLinkDetailResult getListLinkByCate(int cateId, long linkId, int pos, int count) throws org.apache.thrift.TException;

    public TListLinkDetailResult getListLinkBySource(int source, long linkId, int pos, int count) throws org.apache.thrift.TException;

    public long getLinkShare(long linkId) throws org.apache.thrift.TException;

    public TMapLinkShareResult multiGetLinkShare(List<Long> linkIds) throws org.apache.thrift.TException;

    public TDetailResult parseLink(TAddLink link) throws org.apache.thrift.TException;

    public long addLink(TAddLink link) throws org.apache.thrift.TException;

    public long removeLink(long linkId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void getLink(long linkId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLink_call> resultHandler) throws org.apache.thrift.TException;

    public void getListLinkByUser(int userId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListLinkByUser_call> resultHandler) throws org.apache.thrift.TException;

    public void getListLinkByCate(int cateId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListLinkByCate_call> resultHandler) throws org.apache.thrift.TException;

    public void getListLinkBySource(int source, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListLinkBySource_call> resultHandler) throws org.apache.thrift.TException;

    public void getLinkShare(long linkId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLinkShare_call> resultHandler) throws org.apache.thrift.TException;

    public void multiGetLinkShare(List<Long> linkIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.multiGetLinkShare_call> resultHandler) throws org.apache.thrift.TException;

    public void parseLink(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.parseLink_call> resultHandler) throws org.apache.thrift.TException;

    public void addLink(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addLink_call> resultHandler) throws org.apache.thrift.TException;

    public void removeLink(long linkId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeLink_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public int recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public TDetailResult getLink(long linkId) throws org.apache.thrift.TException
    {
      send_getLink(linkId);
      return recv_getLink();
    }

    public void send_getLink(long linkId) throws org.apache.thrift.TException
    {
      getLink_args args = new getLink_args();
      args.setLinkId(linkId);
      sendBase("getLink", args);
    }

    public TDetailResult recv_getLink() throws org.apache.thrift.TException
    {
      getLink_result result = new getLink_result();
      receiveBase(result, "getLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLink failed: unknown result");
    }

    public TListLinkDetailResult getListLinkByUser(int userId, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      send_getListLinkByUser(userId, linkId, pos, count);
      return recv_getListLinkByUser();
    }

    public void send_getListLinkByUser(int userId, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      getListLinkByUser_args args = new getListLinkByUser_args();
      args.setUserId(userId);
      args.setLinkId(linkId);
      args.setPos(pos);
      args.setCount(count);
      sendBase("getListLinkByUser", args);
    }

    public TListLinkDetailResult recv_getListLinkByUser() throws org.apache.thrift.TException
    {
      getListLinkByUser_result result = new getListLinkByUser_result();
      receiveBase(result, "getListLinkByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListLinkByUser failed: unknown result");
    }

    public TListLinkDetailResult getListLinkByCate(int cateId, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      send_getListLinkByCate(cateId, linkId, pos, count);
      return recv_getListLinkByCate();
    }

    public void send_getListLinkByCate(int cateId, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      getListLinkByCate_args args = new getListLinkByCate_args();
      args.setCateId(cateId);
      args.setLinkId(linkId);
      args.setPos(pos);
      args.setCount(count);
      sendBase("getListLinkByCate", args);
    }

    public TListLinkDetailResult recv_getListLinkByCate() throws org.apache.thrift.TException
    {
      getListLinkByCate_result result = new getListLinkByCate_result();
      receiveBase(result, "getListLinkByCate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListLinkByCate failed: unknown result");
    }

    public TListLinkDetailResult getListLinkBySource(int source, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      send_getListLinkBySource(source, linkId, pos, count);
      return recv_getListLinkBySource();
    }

    public void send_getListLinkBySource(int source, long linkId, int pos, int count) throws org.apache.thrift.TException
    {
      getListLinkBySource_args args = new getListLinkBySource_args();
      args.setSource(source);
      args.setLinkId(linkId);
      args.setPos(pos);
      args.setCount(count);
      sendBase("getListLinkBySource", args);
    }

    public TListLinkDetailResult recv_getListLinkBySource() throws org.apache.thrift.TException
    {
      getListLinkBySource_result result = new getListLinkBySource_result();
      receiveBase(result, "getListLinkBySource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListLinkBySource failed: unknown result");
    }

    public long getLinkShare(long linkId) throws org.apache.thrift.TException
    {
      send_getLinkShare(linkId);
      return recv_getLinkShare();
    }

    public void send_getLinkShare(long linkId) throws org.apache.thrift.TException
    {
      getLinkShare_args args = new getLinkShare_args();
      args.setLinkId(linkId);
      sendBase("getLinkShare", args);
    }

    public long recv_getLinkShare() throws org.apache.thrift.TException
    {
      getLinkShare_result result = new getLinkShare_result();
      receiveBase(result, "getLinkShare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLinkShare failed: unknown result");
    }

    public TMapLinkShareResult multiGetLinkShare(List<Long> linkIds) throws org.apache.thrift.TException
    {
      send_multiGetLinkShare(linkIds);
      return recv_multiGetLinkShare();
    }

    public void send_multiGetLinkShare(List<Long> linkIds) throws org.apache.thrift.TException
    {
      multiGetLinkShare_args args = new multiGetLinkShare_args();
      args.setLinkIds(linkIds);
      sendBase("multiGetLinkShare", args);
    }

    public TMapLinkShareResult recv_multiGetLinkShare() throws org.apache.thrift.TException
    {
      multiGetLinkShare_result result = new multiGetLinkShare_result();
      receiveBase(result, "multiGetLinkShare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiGetLinkShare failed: unknown result");
    }

    public TDetailResult parseLink(TAddLink link) throws org.apache.thrift.TException
    {
      send_parseLink(link);
      return recv_parseLink();
    }

    public void send_parseLink(TAddLink link) throws org.apache.thrift.TException
    {
      parseLink_args args = new parseLink_args();
      args.setLink(link);
      sendBase("parseLink", args);
    }

    public TDetailResult recv_parseLink() throws org.apache.thrift.TException
    {
      parseLink_result result = new parseLink_result();
      receiveBase(result, "parseLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseLink failed: unknown result");
    }

    public long addLink(TAddLink link) throws org.apache.thrift.TException
    {
      send_addLink(link);
      return recv_addLink();
    }

    public void send_addLink(TAddLink link) throws org.apache.thrift.TException
    {
      addLink_args args = new addLink_args();
      args.setLink(link);
      sendBase("addLink", args);
    }

    public long recv_addLink() throws org.apache.thrift.TException
    {
      addLink_result result = new addLink_result();
      receiveBase(result, "addLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLink failed: unknown result");
    }

    public long removeLink(long linkId) throws org.apache.thrift.TException
    {
      send_removeLink(linkId);
      return recv_removeLink();
    }

    public void send_removeLink(long linkId) throws org.apache.thrift.TException
    {
      removeLink_args args = new removeLink_args();
      args.setLinkId(linkId);
      sendBase("removeLink", args);
    }

    public long recv_removeLink() throws org.apache.thrift.TException
    {
      removeLink_result result = new removeLink_result();
      receiveBase(result, "removeLink");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeLink failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void getLink(long linkId, org.apache.thrift.async.AsyncMethodCallback<getLink_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLink_call method_call = new getLink_call(linkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long linkId;
      public getLink_call(long linkId, org.apache.thrift.async.AsyncMethodCallback<getLink_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.linkId = linkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLink_args args = new getLink_args();
        args.setLinkId(linkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDetailResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLink();
      }
    }

    public void getListLinkByUser(int userId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkByUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListLinkByUser_call method_call = new getListLinkByUser_call(userId, linkId, pos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListLinkByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private long linkId;
      private int pos;
      private int count;
      public getListLinkByUser_call(int userId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkByUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.linkId = linkId;
        this.pos = pos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListLinkByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListLinkByUser_args args = new getListLinkByUser_args();
        args.setUserId(userId);
        args.setLinkId(linkId);
        args.setPos(pos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TListLinkDetailResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListLinkByUser();
      }
    }

    public void getListLinkByCate(int cateId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkByCate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListLinkByCate_call method_call = new getListLinkByCate_call(cateId, linkId, pos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListLinkByCate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cateId;
      private long linkId;
      private int pos;
      private int count;
      public getListLinkByCate_call(int cateId, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkByCate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cateId = cateId;
        this.linkId = linkId;
        this.pos = pos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListLinkByCate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListLinkByCate_args args = new getListLinkByCate_args();
        args.setCateId(cateId);
        args.setLinkId(linkId);
        args.setPos(pos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TListLinkDetailResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListLinkByCate();
      }
    }

    public void getListLinkBySource(int source, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkBySource_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListLinkBySource_call method_call = new getListLinkBySource_call(source, linkId, pos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListLinkBySource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int source;
      private long linkId;
      private int pos;
      private int count;
      public getListLinkBySource_call(int source, long linkId, int pos, int count, org.apache.thrift.async.AsyncMethodCallback<getListLinkBySource_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.source = source;
        this.linkId = linkId;
        this.pos = pos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListLinkBySource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListLinkBySource_args args = new getListLinkBySource_args();
        args.setSource(source);
        args.setLinkId(linkId);
        args.setPos(pos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TListLinkDetailResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListLinkBySource();
      }
    }

    public void getLinkShare(long linkId, org.apache.thrift.async.AsyncMethodCallback<getLinkShare_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLinkShare_call method_call = new getLinkShare_call(linkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLinkShare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long linkId;
      public getLinkShare_call(long linkId, org.apache.thrift.async.AsyncMethodCallback<getLinkShare_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.linkId = linkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLinkShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLinkShare_args args = new getLinkShare_args();
        args.setLinkId(linkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLinkShare();
      }
    }

    public void multiGetLinkShare(List<Long> linkIds, org.apache.thrift.async.AsyncMethodCallback<multiGetLinkShare_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiGetLinkShare_call method_call = new multiGetLinkShare_call(linkIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiGetLinkShare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> linkIds;
      public multiGetLinkShare_call(List<Long> linkIds, org.apache.thrift.async.AsyncMethodCallback<multiGetLinkShare_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.linkIds = linkIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiGetLinkShare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiGetLinkShare_args args = new multiGetLinkShare_args();
        args.setLinkIds(linkIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMapLinkShareResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiGetLinkShare();
      }
    }

    public void parseLink(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<parseLink_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseLink_call method_call = new parseLink_call(link, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAddLink link;
      public parseLink_call(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<parseLink_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.link = link;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseLink_args args = new parseLink_args();
        args.setLink(link);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDetailResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseLink();
      }
    }

    public void addLink(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<addLink_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLink_call method_call = new addLink_call(link, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAddLink link;
      public addLink_call(TAddLink link, org.apache.thrift.async.AsyncMethodCallback<addLink_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.link = link;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLink_args args = new addLink_args();
        args.setLink(link);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLink();
      }
    }

    public void removeLink(long linkId, org.apache.thrift.async.AsyncMethodCallback<removeLink_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeLink_call method_call = new removeLink_call(linkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeLink_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long linkId;
      public removeLink_call(long linkId, org.apache.thrift.async.AsyncMethodCallback<removeLink_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.linkId = linkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeLink", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeLink_args args = new removeLink_args();
        args.setLinkId(linkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeLink();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getLink", new getLink());
      processMap.put("getListLinkByUser", new getListLinkByUser());
      processMap.put("getListLinkByCate", new getListLinkByCate());
      processMap.put("getListLinkBySource", new getListLinkBySource());
      processMap.put("getLinkShare", new getLinkShare());
      processMap.put("multiGetLinkShare", new multiGetLinkShare());
      processMap.put("parseLink", new parseLink());
      processMap.put("addLink", new addLink());
      processMap.put("removeLink", new removeLink());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLink_args> {
      public getLink() {
        super("getLink");
      }

      public getLink_args getEmptyArgsInstance() {
        return new getLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLink_result getResult(I iface, getLink_args args) throws org.apache.thrift.TException {
        getLink_result result = new getLink_result();
        result.success = iface.getLink(args.linkId);
        return result;
      }
    }

    public static class getListLinkByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListLinkByUser_args> {
      public getListLinkByUser() {
        super("getListLinkByUser");
      }

      public getListLinkByUser_args getEmptyArgsInstance() {
        return new getListLinkByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListLinkByUser_result getResult(I iface, getListLinkByUser_args args) throws org.apache.thrift.TException {
        getListLinkByUser_result result = new getListLinkByUser_result();
        result.success = iface.getListLinkByUser(args.userId, args.linkId, args.pos, args.count);
        return result;
      }
    }

    public static class getListLinkByCate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListLinkByCate_args> {
      public getListLinkByCate() {
        super("getListLinkByCate");
      }

      public getListLinkByCate_args getEmptyArgsInstance() {
        return new getListLinkByCate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListLinkByCate_result getResult(I iface, getListLinkByCate_args args) throws org.apache.thrift.TException {
        getListLinkByCate_result result = new getListLinkByCate_result();
        result.success = iface.getListLinkByCate(args.cateId, args.linkId, args.pos, args.count);
        return result;
      }
    }

    public static class getListLinkBySource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListLinkBySource_args> {
      public getListLinkBySource() {
        super("getListLinkBySource");
      }

      public getListLinkBySource_args getEmptyArgsInstance() {
        return new getListLinkBySource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListLinkBySource_result getResult(I iface, getListLinkBySource_args args) throws org.apache.thrift.TException {
        getListLinkBySource_result result = new getListLinkBySource_result();
        result.success = iface.getListLinkBySource(args.source, args.linkId, args.pos, args.count);
        return result;
      }
    }

    public static class getLinkShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLinkShare_args> {
      public getLinkShare() {
        super("getLinkShare");
      }

      public getLinkShare_args getEmptyArgsInstance() {
        return new getLinkShare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLinkShare_result getResult(I iface, getLinkShare_args args) throws org.apache.thrift.TException {
        getLinkShare_result result = new getLinkShare_result();
        result.success = iface.getLinkShare(args.linkId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multiGetLinkShare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiGetLinkShare_args> {
      public multiGetLinkShare() {
        super("multiGetLinkShare");
      }

      public multiGetLinkShare_args getEmptyArgsInstance() {
        return new multiGetLinkShare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multiGetLinkShare_result getResult(I iface, multiGetLinkShare_args args) throws org.apache.thrift.TException {
        multiGetLinkShare_result result = new multiGetLinkShare_result();
        result.success = iface.multiGetLinkShare(args.linkIds);
        return result;
      }
    }

    public static class parseLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseLink_args> {
      public parseLink() {
        super("parseLink");
      }

      public parseLink_args getEmptyArgsInstance() {
        return new parseLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parseLink_result getResult(I iface, parseLink_args args) throws org.apache.thrift.TException {
        parseLink_result result = new parseLink_result();
        result.success = iface.parseLink(args.link);
        return result;
      }
    }

    public static class addLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLink_args> {
      public addLink() {
        super("addLink");
      }

      public addLink_args getEmptyArgsInstance() {
        return new addLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLink_result getResult(I iface, addLink_args args) throws org.apache.thrift.TException {
        addLink_result result = new addLink_result();
        result.success = iface.addLink(args.link);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeLink<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeLink_args> {
      public removeLink() {
        super("removeLink");
      }

      public removeLink_args getEmptyArgsInstance() {
        return new removeLink_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeLink_result getResult(I iface, removeLink_args args) throws org.apache.thrift.TException {
        removeLink_result result = new removeLink_result();
        result.success = iface.removeLink(args.linkId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLink_args implements org.apache.thrift.TBase<getLink_args, getLink_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLink_args");

    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLink_argsTupleSchemeFactory());
    }

    public long linkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK_ID((short)1, "linkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK_ID
            return LINK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLink_args.class, metaDataMap);
    }

    public getLink_args() {
    }

    public getLink_args(
      long linkId)
    {
      this();
      this.linkId = linkId;
      setLinkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLink_args(getLink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.linkId = other.linkId;
    }

    public getLink_args deepCopy() {
      return new getLink_args(this);
    }

    @Override
    public void clear() {
      setLinkIdIsSet(false);
      this.linkId = 0;
    }

    public long getLinkId() {
      return this.linkId;
    }

    public getLink_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK_ID:
        return Long.valueOf(getLinkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK_ID:
        return isSetLinkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLink_args)
        return this.equals((getLink_args)that);
      return false;
    }

    public boolean equals(getLink_args that) {
      if (that == null)
        return false;

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLink_args typedOther = (getLink_args)other;

      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLink_args(");
      boolean first = true;

      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLink_argsStandardSchemeFactory implements SchemeFactory {
      public getLink_argsStandardScheme getScheme() {
        return new getLink_argsStandardScheme();
      }
    }

    private static class getLink_argsStandardScheme extends StandardScheme<getLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLink_argsTupleSchemeFactory implements SchemeFactory {
      public getLink_argsTupleScheme getScheme() {
        return new getLink_argsTupleScheme();
      }
    }

    private static class getLink_argsTupleScheme extends TupleScheme<getLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.linkId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
      }
    }

  }

  public static class getLink_result implements org.apache.thrift.TBase<getLink_result, getLink_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLink_resultTupleSchemeFactory());
    }

    public TDetailResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDetailResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLink_result.class, metaDataMap);
    }

    public getLink_result() {
    }

    public getLink_result(
      TDetailResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLink_result(getLink_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDetailResult(other.success);
      }
    }

    public getLink_result deepCopy() {
      return new getLink_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TDetailResult getSuccess() {
      return this.success;
    }

    public getLink_result setSuccess(TDetailResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDetailResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLink_result)
        return this.equals((getLink_result)that);
      return false;
    }

    public boolean equals(getLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLink_result typedOther = (getLink_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLink_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLink_resultStandardSchemeFactory implements SchemeFactory {
      public getLink_resultStandardScheme getScheme() {
        return new getLink_resultStandardScheme();
      }
    }

    private static class getLink_resultStandardScheme extends StandardScheme<getLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDetailResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLink_resultTupleSchemeFactory implements SchemeFactory {
      public getLink_resultTupleScheme getScheme() {
        return new getLink_resultTupleScheme();
      }
    }

    private static class getLink_resultTupleScheme extends TupleScheme<getLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TDetailResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListLinkByUser_args implements org.apache.thrift.TBase<getListLinkByUser_args, getListLinkByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkByUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkByUser_argsTupleSchemeFactory());
    }

    public int userId; // required
    public long linkId; // required
    public int pos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      LINK_ID((short)2, "linkId"),
      POS((short)3, "pos"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // LINK_ID
            return LINK_ID;
          case 3: // POS
            return POS;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __LINKID_ISSET_ID = 1;
    private static final int __POS_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkByUser_args.class, metaDataMap);
    }

    public getListLinkByUser_args() {
    }

    public getListLinkByUser_args(
      int userId,
      long linkId,
      int pos,
      int count)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.linkId = linkId;
      setLinkIdIsSet(true);
      this.pos = pos;
      setPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkByUser_args(getListLinkByUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.linkId = other.linkId;
      this.pos = other.pos;
      this.count = other.count;
    }

    public getListLinkByUser_args deepCopy() {
      return new getListLinkByUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setLinkIdIsSet(false);
      this.linkId = 0;
      setPosIsSet(false);
      this.pos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getListLinkByUser_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getLinkId() {
      return this.linkId;
    }

    public getListLinkByUser_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public int getPos() {
      return this.pos;
    }

    public getListLinkByUser_args setPos(int pos) {
      this.pos = pos;
      setPosIsSet(true);
      return this;
    }

    public void unsetPos() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
    }

    /** Returns true if field pos is set (has been assigned a value) and false otherwise */
    public boolean isSetPos() {
      return EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
    }

    public void setPosIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getListLinkByUser_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      case POS:
        if (value == null) {
          unsetPos();
        } else {
          setPos((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      case LINK_ID:
        return Long.valueOf(getLinkId());

      case POS:
        return Integer.valueOf(getPos());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case LINK_ID:
        return isSetLinkId();
      case POS:
        return isSetPos();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkByUser_args)
        return this.equals((getListLinkByUser_args)that);
      return false;
    }

    public boolean equals(getListLinkByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      boolean this_present_pos = true;
      boolean that_present_pos = true;
      if (this_present_pos || that_present_pos) {
        if (!(this_present_pos && that_present_pos))
          return false;
        if (this.pos != that.pos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkByUser_args typedOther = (getListLinkByUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPos()).compareTo(typedOther.isSetPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, typedOther.pos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkByUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pos:");
      sb.append(this.pos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'pos' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkByUser_argsStandardSchemeFactory implements SchemeFactory {
      public getListLinkByUser_argsStandardScheme getScheme() {
        return new getListLinkByUser_argsStandardScheme();
      }
    }

    private static class getListLinkByUser_argsStandardScheme extends StandardScheme<getListLinkByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pos = iprot.readI32();
                struct.setPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUserId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetPos()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetCount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POS_FIELD_DESC);
        oprot.writeI32(struct.pos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkByUser_argsTupleSchemeFactory implements SchemeFactory {
      public getListLinkByUser_argsTupleScheme getScheme() {
        return new getListLinkByUser_argsTupleScheme();
      }
    }

    private static class getListLinkByUser_argsTupleScheme extends TupleScheme<getListLinkByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.userId);
        oprot.writeI64(struct.linkId);
        oprot.writeI32(struct.pos);
        oprot.writeI32(struct.count);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
        struct.pos = iprot.readI32();
        struct.setPosIsSet(true);
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }

  }

  public static class getListLinkByUser_result implements org.apache.thrift.TBase<getListLinkByUser_result, getListLinkByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkByUser_resultTupleSchemeFactory());
    }

    public TListLinkDetailResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TListLinkDetailResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkByUser_result.class, metaDataMap);
    }

    public getListLinkByUser_result() {
    }

    public getListLinkByUser_result(
      TListLinkDetailResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkByUser_result(getListLinkByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new TListLinkDetailResult(other.success);
      }
    }

    public getListLinkByUser_result deepCopy() {
      return new getListLinkByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TListLinkDetailResult getSuccess() {
      return this.success;
    }

    public getListLinkByUser_result setSuccess(TListLinkDetailResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TListLinkDetailResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkByUser_result)
        return this.equals((getListLinkByUser_result)that);
      return false;
    }

    public boolean equals(getListLinkByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkByUser_result typedOther = (getListLinkByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkByUser_resultStandardSchemeFactory implements SchemeFactory {
      public getListLinkByUser_resultStandardScheme getScheme() {
        return new getListLinkByUser_resultStandardScheme();
      }
    }

    private static class getListLinkByUser_resultStandardScheme extends StandardScheme<getListLinkByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TListLinkDetailResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkByUser_resultTupleSchemeFactory implements SchemeFactory {
      public getListLinkByUser_resultTupleScheme getScheme() {
        return new getListLinkByUser_resultTupleScheme();
      }
    }

    private static class getListLinkByUser_resultTupleScheme extends TupleScheme<getListLinkByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TListLinkDetailResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListLinkByCate_args implements org.apache.thrift.TBase<getListLinkByCate_args, getListLinkByCate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkByCate_args");

    private static final org.apache.thrift.protocol.TField CATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cateId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkByCate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkByCate_argsTupleSchemeFactory());
    }

    public int cateId; // required
    public long linkId; // required
    public int pos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATE_ID((short)1, "cateId"),
      LINK_ID((short)2, "linkId"),
      POS((short)3, "pos"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATE_ID
            return CATE_ID;
          case 2: // LINK_ID
            return LINK_ID;
          case 3: // POS
            return POS;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEID_ISSET_ID = 0;
    private static final int __LINKID_ISSET_ID = 1;
    private static final int __POS_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATE_ID, new org.apache.thrift.meta_data.FieldMetaData("cateId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkByCate_args.class, metaDataMap);
    }

    public getListLinkByCate_args() {
    }

    public getListLinkByCate_args(
      int cateId,
      long linkId,
      int pos,
      int count)
    {
      this();
      this.cateId = cateId;
      setCateIdIsSet(true);
      this.linkId = linkId;
      setLinkIdIsSet(true);
      this.pos = pos;
      setPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkByCate_args(getListLinkByCate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cateId = other.cateId;
      this.linkId = other.linkId;
      this.pos = other.pos;
      this.count = other.count;
    }

    public getListLinkByCate_args deepCopy() {
      return new getListLinkByCate_args(this);
    }

    @Override
    public void clear() {
      setCateIdIsSet(false);
      this.cateId = 0;
      setLinkIdIsSet(false);
      this.linkId = 0;
      setPosIsSet(false);
      this.pos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getCateId() {
      return this.cateId;
    }

    public getListLinkByCate_args setCateId(int cateId) {
      this.cateId = cateId;
      setCateIdIsSet(true);
      return this;
    }

    public void unsetCateId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEID_ISSET_ID);
    }

    /** Returns true if field cateId is set (has been assigned a value) and false otherwise */
    public boolean isSetCateId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEID_ISSET_ID);
    }

    public void setCateIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEID_ISSET_ID, value);
    }

    public long getLinkId() {
      return this.linkId;
    }

    public getListLinkByCate_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public int getPos() {
      return this.pos;
    }

    public getListLinkByCate_args setPos(int pos) {
      this.pos = pos;
      setPosIsSet(true);
      return this;
    }

    public void unsetPos() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
    }

    /** Returns true if field pos is set (has been assigned a value) and false otherwise */
    public boolean isSetPos() {
      return EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
    }

    public void setPosIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getListLinkByCate_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATE_ID:
        if (value == null) {
          unsetCateId();
        } else {
          setCateId((Integer)value);
        }
        break;

      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      case POS:
        if (value == null) {
          unsetPos();
        } else {
          setPos((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATE_ID:
        return Integer.valueOf(getCateId());

      case LINK_ID:
        return Long.valueOf(getLinkId());

      case POS:
        return Integer.valueOf(getPos());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATE_ID:
        return isSetCateId();
      case LINK_ID:
        return isSetLinkId();
      case POS:
        return isSetPos();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkByCate_args)
        return this.equals((getListLinkByCate_args)that);
      return false;
    }

    public boolean equals(getListLinkByCate_args that) {
      if (that == null)
        return false;

      boolean this_present_cateId = true;
      boolean that_present_cateId = true;
      if (this_present_cateId || that_present_cateId) {
        if (!(this_present_cateId && that_present_cateId))
          return false;
        if (this.cateId != that.cateId)
          return false;
      }

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      boolean this_present_pos = true;
      boolean that_present_pos = true;
      if (this_present_pos || that_present_pos) {
        if (!(this_present_pos && that_present_pos))
          return false;
        if (this.pos != that.pos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkByCate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkByCate_args typedOther = (getListLinkByCate_args)other;

      lastComparison = Boolean.valueOf(isSetCateId()).compareTo(typedOther.isSetCateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cateId, typedOther.cateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPos()).compareTo(typedOther.isSetPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, typedOther.pos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkByCate_args(");
      boolean first = true;

      sb.append("cateId:");
      sb.append(this.cateId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pos:");
      sb.append(this.pos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'cateId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'pos' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkByCate_argsStandardSchemeFactory implements SchemeFactory {
      public getListLinkByCate_argsStandardScheme getScheme() {
        return new getListLinkByCate_argsStandardScheme();
      }
    }

    private static class getListLinkByCate_argsStandardScheme extends StandardScheme<getListLinkByCate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkByCate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cateId = iprot.readI32();
                struct.setCateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pos = iprot.readI32();
                struct.setPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetCateId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'cateId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetPos()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetCount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkByCate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATE_ID_FIELD_DESC);
        oprot.writeI32(struct.cateId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POS_FIELD_DESC);
        oprot.writeI32(struct.pos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkByCate_argsTupleSchemeFactory implements SchemeFactory {
      public getListLinkByCate_argsTupleScheme getScheme() {
        return new getListLinkByCate_argsTupleScheme();
      }
    }

    private static class getListLinkByCate_argsTupleScheme extends TupleScheme<getListLinkByCate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkByCate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.cateId);
        oprot.writeI64(struct.linkId);
        oprot.writeI32(struct.pos);
        oprot.writeI32(struct.count);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkByCate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.cateId = iprot.readI32();
        struct.setCateIdIsSet(true);
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
        struct.pos = iprot.readI32();
        struct.setPosIsSet(true);
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }

  }

  public static class getListLinkByCate_result implements org.apache.thrift.TBase<getListLinkByCate_result, getListLinkByCate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkByCate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkByCate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkByCate_resultTupleSchemeFactory());
    }

    public TListLinkDetailResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TListLinkDetailResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkByCate_result.class, metaDataMap);
    }

    public getListLinkByCate_result() {
    }

    public getListLinkByCate_result(
      TListLinkDetailResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkByCate_result(getListLinkByCate_result other) {
      if (other.isSetSuccess()) {
        this.success = new TListLinkDetailResult(other.success);
      }
    }

    public getListLinkByCate_result deepCopy() {
      return new getListLinkByCate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TListLinkDetailResult getSuccess() {
      return this.success;
    }

    public getListLinkByCate_result setSuccess(TListLinkDetailResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TListLinkDetailResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkByCate_result)
        return this.equals((getListLinkByCate_result)that);
      return false;
    }

    public boolean equals(getListLinkByCate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkByCate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkByCate_result typedOther = (getListLinkByCate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkByCate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkByCate_resultStandardSchemeFactory implements SchemeFactory {
      public getListLinkByCate_resultStandardScheme getScheme() {
        return new getListLinkByCate_resultStandardScheme();
      }
    }

    private static class getListLinkByCate_resultStandardScheme extends StandardScheme<getListLinkByCate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkByCate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TListLinkDetailResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkByCate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkByCate_resultTupleSchemeFactory implements SchemeFactory {
      public getListLinkByCate_resultTupleScheme getScheme() {
        return new getListLinkByCate_resultTupleScheme();
      }
    }

    private static class getListLinkByCate_resultTupleScheme extends TupleScheme<getListLinkByCate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkByCate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkByCate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TListLinkDetailResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListLinkBySource_args implements org.apache.thrift.TBase<getListLinkBySource_args, getListLinkBySource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkBySource_args");

    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkBySource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkBySource_argsTupleSchemeFactory());
    }

    public int source; // required
    public long linkId; // required
    public int pos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE((short)1, "source"),
      LINK_ID((short)2, "linkId"),
      POS((short)3, "pos"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE
            return SOURCE;
          case 2: // LINK_ID
            return LINK_ID;
          case 3: // POS
            return POS;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCE_ISSET_ID = 0;
    private static final int __LINKID_ISSET_ID = 1;
    private static final int __POS_ISSET_ID = 2;
    private static final int __COUNT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkBySource_args.class, metaDataMap);
    }

    public getListLinkBySource_args() {
    }

    public getListLinkBySource_args(
      int source,
      long linkId,
      int pos,
      int count)
    {
      this();
      this.source = source;
      setSourceIsSet(true);
      this.linkId = linkId;
      setLinkIdIsSet(true);
      this.pos = pos;
      setPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkBySource_args(getListLinkBySource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.source = other.source;
      this.linkId = other.linkId;
      this.pos = other.pos;
      this.count = other.count;
    }

    public getListLinkBySource_args deepCopy() {
      return new getListLinkBySource_args(this);
    }

    @Override
    public void clear() {
      setSourceIsSet(false);
      this.source = 0;
      setLinkIdIsSet(false);
      this.linkId = 0;
      setPosIsSet(false);
      this.pos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getSource() {
      return this.source;
    }

    public getListLinkBySource_args setSource(int source) {
      this.source = source;
      setSourceIsSet(true);
      return this;
    }

    public void unsetSource() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    public void setSourceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
    }

    public long getLinkId() {
      return this.linkId;
    }

    public getListLinkBySource_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public int getPos() {
      return this.pos;
    }

    public getListLinkBySource_args setPos(int pos) {
      this.pos = pos;
      setPosIsSet(true);
      return this;
    }

    public void unsetPos() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POS_ISSET_ID);
    }

    /** Returns true if field pos is set (has been assigned a value) and false otherwise */
    public boolean isSetPos() {
      return EncodingUtils.testBit(__isset_bitfield, __POS_ISSET_ID);
    }

    public void setPosIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getListLinkBySource_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((Integer)value);
        }
        break;

      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      case POS:
        if (value == null) {
          unsetPos();
        } else {
          setPos((Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE:
        return Integer.valueOf(getSource());

      case LINK_ID:
        return Long.valueOf(getLinkId());

      case POS:
        return Integer.valueOf(getPos());

      case COUNT:
        return Integer.valueOf(getCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE:
        return isSetSource();
      case LINK_ID:
        return isSetLinkId();
      case POS:
        return isSetPos();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkBySource_args)
        return this.equals((getListLinkBySource_args)that);
      return false;
    }

    public boolean equals(getListLinkBySource_args that) {
      if (that == null)
        return false;

      boolean this_present_source = true;
      boolean that_present_source = true;
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (this.source != that.source)
          return false;
      }

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      boolean this_present_pos = true;
      boolean that_present_pos = true;
      if (this_present_pos || that_present_pos) {
        if (!(this_present_pos && that_present_pos))
          return false;
        if (this.pos != that.pos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkBySource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkBySource_args typedOther = (getListLinkBySource_args)other;

      lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPos()).compareTo(typedOther.isSetPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, typedOther.pos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkBySource_args(");
      boolean first = true;

      sb.append("source:");
      sb.append(this.source);
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pos:");
      sb.append(this.pos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'source' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'pos' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkBySource_argsStandardSchemeFactory implements SchemeFactory {
      public getListLinkBySource_argsStandardScheme getScheme() {
        return new getListLinkBySource_argsStandardScheme();
      }
    }

    private static class getListLinkBySource_argsStandardScheme extends StandardScheme<getListLinkBySource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkBySource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.source = iprot.readI32();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pos = iprot.readI32();
                struct.setPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSource()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetPos()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'pos' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetCount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkBySource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POS_FIELD_DESC);
        oprot.writeI32(struct.pos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkBySource_argsTupleSchemeFactory implements SchemeFactory {
      public getListLinkBySource_argsTupleScheme getScheme() {
        return new getListLinkBySource_argsTupleScheme();
      }
    }

    private static class getListLinkBySource_argsTupleScheme extends TupleScheme<getListLinkBySource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkBySource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.source);
        oprot.writeI64(struct.linkId);
        oprot.writeI32(struct.pos);
        oprot.writeI32(struct.count);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkBySource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
        struct.pos = iprot.readI32();
        struct.setPosIsSet(true);
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }

  }

  public static class getListLinkBySource_result implements org.apache.thrift.TBase<getListLinkBySource_result, getListLinkBySource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListLinkBySource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListLinkBySource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListLinkBySource_resultTupleSchemeFactory());
    }

    public TListLinkDetailResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TListLinkDetailResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListLinkBySource_result.class, metaDataMap);
    }

    public getListLinkBySource_result() {
    }

    public getListLinkBySource_result(
      TListLinkDetailResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListLinkBySource_result(getListLinkBySource_result other) {
      if (other.isSetSuccess()) {
        this.success = new TListLinkDetailResult(other.success);
      }
    }

    public getListLinkBySource_result deepCopy() {
      return new getListLinkBySource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TListLinkDetailResult getSuccess() {
      return this.success;
    }

    public getListLinkBySource_result setSuccess(TListLinkDetailResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TListLinkDetailResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListLinkBySource_result)
        return this.equals((getListLinkBySource_result)that);
      return false;
    }

    public boolean equals(getListLinkBySource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListLinkBySource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListLinkBySource_result typedOther = (getListLinkBySource_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListLinkBySource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListLinkBySource_resultStandardSchemeFactory implements SchemeFactory {
      public getListLinkBySource_resultStandardScheme getScheme() {
        return new getListLinkBySource_resultStandardScheme();
      }
    }

    private static class getListLinkBySource_resultStandardScheme extends StandardScheme<getListLinkBySource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListLinkBySource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TListLinkDetailResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListLinkBySource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListLinkBySource_resultTupleSchemeFactory implements SchemeFactory {
      public getListLinkBySource_resultTupleScheme getScheme() {
        return new getListLinkBySource_resultTupleScheme();
      }
    }

    private static class getListLinkBySource_resultTupleScheme extends TupleScheme<getListLinkBySource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListLinkBySource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListLinkBySource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TListLinkDetailResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLinkShare_args implements org.apache.thrift.TBase<getLinkShare_args, getLinkShare_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkShare_args");

    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkShare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkShare_argsTupleSchemeFactory());
    }

    public long linkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK_ID((short)1, "linkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK_ID
            return LINK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkShare_args.class, metaDataMap);
    }

    public getLinkShare_args() {
    }

    public getLinkShare_args(
      long linkId)
    {
      this();
      this.linkId = linkId;
      setLinkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkShare_args(getLinkShare_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.linkId = other.linkId;
    }

    public getLinkShare_args deepCopy() {
      return new getLinkShare_args(this);
    }

    @Override
    public void clear() {
      setLinkIdIsSet(false);
      this.linkId = 0;
    }

    public long getLinkId() {
      return this.linkId;
    }

    public getLinkShare_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK_ID:
        return Long.valueOf(getLinkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK_ID:
        return isSetLinkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkShare_args)
        return this.equals((getLinkShare_args)that);
      return false;
    }

    public boolean equals(getLinkShare_args that) {
      if (that == null)
        return false;

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkShare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkShare_args typedOther = (getLinkShare_args)other;

      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkShare_args(");
      boolean first = true;

      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkShare_argsStandardSchemeFactory implements SchemeFactory {
      public getLinkShare_argsStandardScheme getScheme() {
        return new getLinkShare_argsStandardScheme();
      }
    }

    private static class getLinkShare_argsStandardScheme extends StandardScheme<getLinkShare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkShare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkShare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkShare_argsTupleSchemeFactory implements SchemeFactory {
      public getLinkShare_argsTupleScheme getScheme() {
        return new getLinkShare_argsTupleScheme();
      }
    }

    private static class getLinkShare_argsTupleScheme extends TupleScheme<getLinkShare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.linkId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
      }
    }

  }

  public static class getLinkShare_result implements org.apache.thrift.TBase<getLinkShare_result, getLinkShare_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLinkShare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLinkShare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLinkShare_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLinkShare_result.class, metaDataMap);
    }

    public getLinkShare_result() {
    }

    public getLinkShare_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkShare_result(getLinkShare_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getLinkShare_result deepCopy() {
      return new getLinkShare_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getLinkShare_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkShare_result)
        return this.equals((getLinkShare_result)that);
      return false;
    }

    public boolean equals(getLinkShare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkShare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkShare_result typedOther = (getLinkShare_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkShare_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLinkShare_resultStandardSchemeFactory implements SchemeFactory {
      public getLinkShare_resultStandardScheme getScheme() {
        return new getLinkShare_resultStandardScheme();
      }
    }

    private static class getLinkShare_resultStandardScheme extends StandardScheme<getLinkShare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLinkShare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLinkShare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLinkShare_resultTupleSchemeFactory implements SchemeFactory {
      public getLinkShare_resultTupleScheme getScheme() {
        return new getLinkShare_resultTupleScheme();
      }
    }

    private static class getLinkShare_resultTupleScheme extends TupleScheme<getLinkShare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLinkShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLinkShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multiGetLinkShare_args implements org.apache.thrift.TBase<multiGetLinkShare_args, multiGetLinkShare_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiGetLinkShare_args");

    private static final org.apache.thrift.protocol.TField LINK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("linkIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiGetLinkShare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiGetLinkShare_argsTupleSchemeFactory());
    }

    public List<Long> linkIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK_IDS((short)1, "linkIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK_IDS
            return LINK_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK_IDS, new org.apache.thrift.meta_data.FieldMetaData("linkIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLinkShare_args.class, metaDataMap);
    }

    public multiGetLinkShare_args() {
    }

    public multiGetLinkShare_args(
      List<Long> linkIds)
    {
      this();
      this.linkIds = linkIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLinkShare_args(multiGetLinkShare_args other) {
      if (other.isSetLinkIds()) {
        List<Long> __this__linkIds = new ArrayList<Long>();
        for (Long other_element : other.linkIds) {
          __this__linkIds.add(other_element);
        }
        this.linkIds = __this__linkIds;
      }
    }

    public multiGetLinkShare_args deepCopy() {
      return new multiGetLinkShare_args(this);
    }

    @Override
    public void clear() {
      this.linkIds = null;
    }

    public int getLinkIdsSize() {
      return (this.linkIds == null) ? 0 : this.linkIds.size();
    }

    public java.util.Iterator<Long> getLinkIdsIterator() {
      return (this.linkIds == null) ? null : this.linkIds.iterator();
    }

    public void addToLinkIds(long elem) {
      if (this.linkIds == null) {
        this.linkIds = new ArrayList<Long>();
      }
      this.linkIds.add(elem);
    }

    public List<Long> getLinkIds() {
      return this.linkIds;
    }

    public multiGetLinkShare_args setLinkIds(List<Long> linkIds) {
      this.linkIds = linkIds;
      return this;
    }

    public void unsetLinkIds() {
      this.linkIds = null;
    }

    /** Returns true if field linkIds is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkIds() {
      return this.linkIds != null;
    }

    public void setLinkIdsIsSet(boolean value) {
      if (!value) {
        this.linkIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK_IDS:
        if (value == null) {
          unsetLinkIds();
        } else {
          setLinkIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK_IDS:
        return getLinkIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK_IDS:
        return isSetLinkIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLinkShare_args)
        return this.equals((multiGetLinkShare_args)that);
      return false;
    }

    public boolean equals(multiGetLinkShare_args that) {
      if (that == null)
        return false;

      boolean this_present_linkIds = true && this.isSetLinkIds();
      boolean that_present_linkIds = true && that.isSetLinkIds();
      if (this_present_linkIds || that_present_linkIds) {
        if (!(this_present_linkIds && that_present_linkIds))
          return false;
        if (!this.linkIds.equals(that.linkIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(multiGetLinkShare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLinkShare_args typedOther = (multiGetLinkShare_args)other;

      lastComparison = Boolean.valueOf(isSetLinkIds()).compareTo(typedOther.isSetLinkIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkIds, typedOther.linkIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLinkShare_args(");
      boolean first = true;

      sb.append("linkIds:");
      if (this.linkIds == null) {
        sb.append("null");
      } else {
        sb.append(this.linkIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (linkIds == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkIds' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiGetLinkShare_argsStandardSchemeFactory implements SchemeFactory {
      public multiGetLinkShare_argsStandardScheme getScheme() {
        return new multiGetLinkShare_argsStandardScheme();
      }
    }

    private static class multiGetLinkShare_argsStandardScheme extends StandardScheme<multiGetLinkShare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiGetLinkShare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.linkIds = new ArrayList<Long>(_list68.size);
                  for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                  {
                    long _elem70; // required
                    _elem70 = iprot.readI64();
                    struct.linkIds.add(_elem70);
                  }
                  iprot.readListEnd();
                }
                struct.setLinkIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiGetLinkShare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.linkIds != null) {
          oprot.writeFieldBegin(LINK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.linkIds.size()));
            for (long _iter71 : struct.linkIds)
            {
              oprot.writeI64(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiGetLinkShare_argsTupleSchemeFactory implements SchemeFactory {
      public multiGetLinkShare_argsTupleScheme getScheme() {
        return new multiGetLinkShare_argsTupleScheme();
      }
    }

    private static class multiGetLinkShare_argsTupleScheme extends TupleScheme<multiGetLinkShare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiGetLinkShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.linkIds.size());
          for (long _iter72 : struct.linkIds)
          {
            oprot.writeI64(_iter72);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiGetLinkShare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.linkIds = new ArrayList<Long>(_list73.size);
          for (int _i74 = 0; _i74 < _list73.size; ++_i74)
          {
            long _elem75; // required
            _elem75 = iprot.readI64();
            struct.linkIds.add(_elem75);
          }
        }
        struct.setLinkIdsIsSet(true);
      }
    }

  }

  public static class multiGetLinkShare_result implements org.apache.thrift.TBase<multiGetLinkShare_result, multiGetLinkShare_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiGetLinkShare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multiGetLinkShare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multiGetLinkShare_resultTupleSchemeFactory());
    }

    public TMapLinkShareResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMapLinkShareResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiGetLinkShare_result.class, metaDataMap);
    }

    public multiGetLinkShare_result() {
    }

    public multiGetLinkShare_result(
      TMapLinkShareResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLinkShare_result(multiGetLinkShare_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMapLinkShareResult(other.success);
      }
    }

    public multiGetLinkShare_result deepCopy() {
      return new multiGetLinkShare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TMapLinkShareResult getSuccess() {
      return this.success;
    }

    public multiGetLinkShare_result setSuccess(TMapLinkShareResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMapLinkShareResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLinkShare_result)
        return this.equals((multiGetLinkShare_result)that);
      return false;
    }

    public boolean equals(multiGetLinkShare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(multiGetLinkShare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      multiGetLinkShare_result typedOther = (multiGetLinkShare_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiGetLinkShare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiGetLinkShare_resultStandardSchemeFactory implements SchemeFactory {
      public multiGetLinkShare_resultStandardScheme getScheme() {
        return new multiGetLinkShare_resultStandardScheme();
      }
    }

    private static class multiGetLinkShare_resultStandardScheme extends StandardScheme<multiGetLinkShare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiGetLinkShare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMapLinkShareResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiGetLinkShare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiGetLinkShare_resultTupleSchemeFactory implements SchemeFactory {
      public multiGetLinkShare_resultTupleScheme getScheme() {
        return new multiGetLinkShare_resultTupleScheme();
      }
    }

    private static class multiGetLinkShare_resultTupleScheme extends TupleScheme<multiGetLinkShare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiGetLinkShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiGetLinkShare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMapLinkShareResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class parseLink_args implements org.apache.thrift.TBase<parseLink_args, parseLink_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseLink_args");

    private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parseLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parseLink_argsTupleSchemeFactory());
    }

    public TAddLink link; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK((short)1, "link");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK
            return LINK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddLink.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseLink_args.class, metaDataMap);
    }

    public parseLink_args() {
    }

    public parseLink_args(
      TAddLink link)
    {
      this();
      this.link = link;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseLink_args(parseLink_args other) {
      if (other.isSetLink()) {
        this.link = new TAddLink(other.link);
      }
    }

    public parseLink_args deepCopy() {
      return new parseLink_args(this);
    }

    @Override
    public void clear() {
      this.link = null;
    }

    public TAddLink getLink() {
      return this.link;
    }

    public parseLink_args setLink(TAddLink link) {
      this.link = link;
      return this;
    }

    public void unsetLink() {
      this.link = null;
    }

    /** Returns true if field link is set (has been assigned a value) and false otherwise */
    public boolean isSetLink() {
      return this.link != null;
    }

    public void setLinkIsSet(boolean value) {
      if (!value) {
        this.link = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK:
        if (value == null) {
          unsetLink();
        } else {
          setLink((TAddLink)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK:
        return getLink();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK:
        return isSetLink();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parseLink_args)
        return this.equals((parseLink_args)that);
      return false;
    }

    public boolean equals(parseLink_args that) {
      if (that == null)
        return false;

      boolean this_present_link = true && this.isSetLink();
      boolean that_present_link = true && that.isSetLink();
      if (this_present_link || that_present_link) {
        if (!(this_present_link && that_present_link))
          return false;
        if (!this.link.equals(that.link))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(parseLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      parseLink_args typedOther = (parseLink_args)other;

      lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, typedOther.link);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parseLink_args(");
      boolean first = true;

      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (link == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'link' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (link != null) {
        link.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseLink_argsStandardSchemeFactory implements SchemeFactory {
      public parseLink_argsStandardScheme getScheme() {
        return new parseLink_argsStandardScheme();
      }
    }

    private static class parseLink_argsStandardScheme extends StandardScheme<parseLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.link = new TAddLink();
                struct.link.read(iprot);
                struct.setLinkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.link != null) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          struct.link.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseLink_argsTupleSchemeFactory implements SchemeFactory {
      public parseLink_argsTupleScheme getScheme() {
        return new parseLink_argsTupleScheme();
      }
    }

    private static class parseLink_argsTupleScheme extends TupleScheme<parseLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parseLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.link.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parseLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.link = new TAddLink();
        struct.link.read(iprot);
        struct.setLinkIsSet(true);
      }
    }

  }

  public static class parseLink_result implements org.apache.thrift.TBase<parseLink_result, parseLink_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parseLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parseLink_resultTupleSchemeFactory());
    }

    public TDetailResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDetailResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseLink_result.class, metaDataMap);
    }

    public parseLink_result() {
    }

    public parseLink_result(
      TDetailResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseLink_result(parseLink_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDetailResult(other.success);
      }
    }

    public parseLink_result deepCopy() {
      return new parseLink_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TDetailResult getSuccess() {
      return this.success;
    }

    public parseLink_result setSuccess(TDetailResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDetailResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parseLink_result)
        return this.equals((parseLink_result)that);
      return false;
    }

    public boolean equals(parseLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(parseLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      parseLink_result typedOther = (parseLink_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parseLink_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseLink_resultStandardSchemeFactory implements SchemeFactory {
      public parseLink_resultStandardScheme getScheme() {
        return new parseLink_resultStandardScheme();
      }
    }

    private static class parseLink_resultStandardScheme extends StandardScheme<parseLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDetailResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseLink_resultTupleSchemeFactory implements SchemeFactory {
      public parseLink_resultTupleScheme getScheme() {
        return new parseLink_resultTupleScheme();
      }
    }

    private static class parseLink_resultTupleScheme extends TupleScheme<parseLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parseLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parseLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TDetailResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addLink_args implements org.apache.thrift.TBase<addLink_args, addLink_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLink_args");

    private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLink_argsTupleSchemeFactory());
    }

    public TAddLink link; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK((short)1, "link");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK
            return LINK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddLink.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLink_args.class, metaDataMap);
    }

    public addLink_args() {
    }

    public addLink_args(
      TAddLink link)
    {
      this();
      this.link = link;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLink_args(addLink_args other) {
      if (other.isSetLink()) {
        this.link = new TAddLink(other.link);
      }
    }

    public addLink_args deepCopy() {
      return new addLink_args(this);
    }

    @Override
    public void clear() {
      this.link = null;
    }

    public TAddLink getLink() {
      return this.link;
    }

    public addLink_args setLink(TAddLink link) {
      this.link = link;
      return this;
    }

    public void unsetLink() {
      this.link = null;
    }

    /** Returns true if field link is set (has been assigned a value) and false otherwise */
    public boolean isSetLink() {
      return this.link != null;
    }

    public void setLinkIsSet(boolean value) {
      if (!value) {
        this.link = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK:
        if (value == null) {
          unsetLink();
        } else {
          setLink((TAddLink)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK:
        return getLink();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK:
        return isSetLink();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLink_args)
        return this.equals((addLink_args)that);
      return false;
    }

    public boolean equals(addLink_args that) {
      if (that == null)
        return false;

      boolean this_present_link = true && this.isSetLink();
      boolean that_present_link = true && that.isSetLink();
      if (this_present_link || that_present_link) {
        if (!(this_present_link && that_present_link))
          return false;
        if (!this.link.equals(that.link))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLink_args typedOther = (addLink_args)other;

      lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLink()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, typedOther.link);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLink_args(");
      boolean first = true;

      sb.append("link:");
      if (this.link == null) {
        sb.append("null");
      } else {
        sb.append(this.link);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (link == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'link' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (link != null) {
        link.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLink_argsStandardSchemeFactory implements SchemeFactory {
      public addLink_argsStandardScheme getScheme() {
        return new addLink_argsStandardScheme();
      }
    }

    private static class addLink_argsStandardScheme extends StandardScheme<addLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.link = new TAddLink();
                struct.link.read(iprot);
                struct.setLinkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.link != null) {
          oprot.writeFieldBegin(LINK_FIELD_DESC);
          struct.link.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLink_argsTupleSchemeFactory implements SchemeFactory {
      public addLink_argsTupleScheme getScheme() {
        return new addLink_argsTupleScheme();
      }
    }

    private static class addLink_argsTupleScheme extends TupleScheme<addLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.link.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.link = new TAddLink();
        struct.link.read(iprot);
        struct.setLinkIsSet(true);
      }
    }

  }

  public static class addLink_result implements org.apache.thrift.TBase<addLink_result, addLink_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLink_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLink_result.class, metaDataMap);
    }

    public addLink_result() {
    }

    public addLink_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLink_result(addLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addLink_result deepCopy() {
      return new addLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addLink_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLink_result)
        return this.equals((addLink_result)that);
      return false;
    }

    public boolean equals(addLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLink_result typedOther = (addLink_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLink_resultStandardSchemeFactory implements SchemeFactory {
      public addLink_resultStandardScheme getScheme() {
        return new addLink_resultStandardScheme();
      }
    }

    private static class addLink_resultStandardScheme extends StandardScheme<addLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLink_resultTupleSchemeFactory implements SchemeFactory {
      public addLink_resultTupleScheme getScheme() {
        return new addLink_resultTupleScheme();
      }
    }

    private static class addLink_resultTupleScheme extends TupleScheme<addLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeLink_args implements org.apache.thrift.TBase<removeLink_args, removeLink_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeLink_args");

    private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeLink_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeLink_argsTupleSchemeFactory());
    }

    public long linkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LINK_ID((short)1, "linkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LINK_ID
            return LINK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeLink_args.class, metaDataMap);
    }

    public removeLink_args() {
    }

    public removeLink_args(
      long linkId)
    {
      this();
      this.linkId = linkId;
      setLinkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeLink_args(removeLink_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.linkId = other.linkId;
    }

    public removeLink_args deepCopy() {
      return new removeLink_args(this);
    }

    @Override
    public void clear() {
      setLinkIdIsSet(false);
      this.linkId = 0;
    }

    public long getLinkId() {
      return this.linkId;
    }

    public removeLink_args setLinkId(long linkId) {
      this.linkId = linkId;
      setLinkIdIsSet(true);
      return this;
    }

    public void unsetLinkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkId() {
      return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
    }

    public void setLinkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LINK_ID:
        if (value == null) {
          unsetLinkId();
        } else {
          setLinkId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LINK_ID:
        return Long.valueOf(getLinkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LINK_ID:
        return isSetLinkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeLink_args)
        return this.equals((removeLink_args)that);
      return false;
    }

    public boolean equals(removeLink_args that) {
      if (that == null)
        return false;

      boolean this_present_linkId = true;
      boolean that_present_linkId = true;
      if (this_present_linkId || that_present_linkId) {
        if (!(this_present_linkId && that_present_linkId))
          return false;
        if (this.linkId != that.linkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeLink_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeLink_args typedOther = (removeLink_args)other;

      lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(typedOther.isSetLinkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, typedOther.linkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeLink_args(");
      boolean first = true;

      sb.append("linkId:");
      sb.append(this.linkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'linkId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeLink_argsStandardSchemeFactory implements SchemeFactory {
      public removeLink_argsStandardScheme getScheme() {
        return new removeLink_argsStandardScheme();
      }
    }

    private static class removeLink_argsStandardScheme extends StandardScheme<removeLink_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeLink_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LINK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.linkId = iprot.readI64();
                struct.setLinkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetLinkId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeLink_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
        oprot.writeI64(struct.linkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeLink_argsTupleSchemeFactory implements SchemeFactory {
      public removeLink_argsTupleScheme getScheme() {
        return new removeLink_argsTupleScheme();
      }
    }

    private static class removeLink_argsTupleScheme extends TupleScheme<removeLink_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.linkId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeLink_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
      }
    }

  }

  public static class removeLink_result implements org.apache.thrift.TBase<removeLink_result, removeLink_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeLink_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeLink_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeLink_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeLink_result.class, metaDataMap);
    }

    public removeLink_result() {
    }

    public removeLink_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeLink_result(removeLink_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeLink_result deepCopy() {
      return new removeLink_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public removeLink_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeLink_result)
        return this.equals((removeLink_result)that);
      return false;
    }

    public boolean equals(removeLink_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeLink_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeLink_result typedOther = (removeLink_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeLink_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeLink_resultStandardSchemeFactory implements SchemeFactory {
      public removeLink_resultStandardScheme getScheme() {
        return new removeLink_resultStandardScheme();
      }
    }

    private static class removeLink_resultStandardScheme extends StandardScheme<removeLink_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeLink_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeLink_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeLink_resultTupleSchemeFactory implements SchemeFactory {
      public removeLink_resultTupleScheme getScheme() {
        return new removeLink_resultTupleScheme();
      }
    }

    private static class removeLink_resultTupleScheme extends TupleScheme<removeLink_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeLink_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
